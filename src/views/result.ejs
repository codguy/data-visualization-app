<div class="max-w-6xl mx-auto bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 transition-colors duration-300">
    <h1 class="text-3xl font-bold mb-6 text-center text-blue-600 dark:text-blue-400">Data Visualization Result</h1>
    <div class="mb-8">
        <h2 class="text-2xl font-semibold mb-4 text-gray-700 dark:text-gray-300">Table View</h2>
        <div class="overflow-x-auto">
            <table id="dataTable" class="min-w-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700">
                <thead>
                    <tr class="bg-gray-100 dark:bg-gray-700">
                        <% Object.keys(data[0]).forEach(header => { %>
                            <th class="py-2 px-4 border-b border-gray-300 dark:border-gray-600 text-left text-sm font-semibold text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                                <%= header %>
                            </th>
                        <% }); %>
                    </tr>
                </thead>
                <tbody id="tableBody">
                    <!-- Table rows will be dynamically inserted here -->
                </tbody>
            </table>
        </div>
        <div class="mt-4 flex justify-between items-center">
            <span id="pageInfo" class="text-gray-600 dark:text-gray-400"></span>
            <div>
                <button id="prevPage" class="px-3 py-1 bg-blue-500 text-white rounded-md mr-2">Previous</button>
                <button id="nextPage" class="px-3 py-1 bg-blue-500 text-white rounded-md">Next</button>
            </div>
        </div>
    </div>

    <script>
        const data = <%- rawData %>;
        const itemsPerPage = 20;
        let currentPage = 1;

        function renderTable() {
            const tableBody = document.getElementById('tableBody');
            tableBody.innerHTML = '';
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const pageData = data.slice(start, end);

            pageData.forEach(row => {
                const tr = document.createElement('tr');
                tr.className = 'hover:bg-gray-50 dark:hover:bg-gray-700';
                Object.values(row).forEach(value => {
                    const td = document.createElement('td');
                    td.className = 'py-2 px-4 border-b border-gray-300 dark:border-gray-600 text-sm text-gray-700 dark:text-gray-300';
                    td.textContent = value;
                    tr.appendChild(td);
                });
                tableBody.appendChild(tr);
            });

            updatePageInfo();
        }

        function updatePageInfo() {
            const pageInfo = document.getElementById('pageInfo');
            const totalPages = Math.ceil(data.length / itemsPerPage);
            pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;

            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;
        }

        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
            }
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            const totalPages = Math.ceil(data.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
            }
        });

        renderTable();
    </script>

    <div>
        <h2 class="text-2xl font-semibold mb-4 text-gray-700 dark:text-gray-300">Chart View</h2>
        <div class="mb-4 flex space-x-4">
            <div>
                <label for="chartType" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Chart
                    Type</label>
                <select id="chartType"
                    class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">lock
                    w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500
                    focus:border-indigo-500 sm:text-sm rounded-md">
                    <option value="area">Area</option>
                    <option value="bar">Bar</option>
                    <option value="line">Line</option>
                    <option value="pie">Pie</option>
                    <option value="doughnut">Doughnut</option>
                    <option value="radar">Radar</option>
                    <option value="polarArea">Polar Area</option>
                    <option value="scatter">Scatter</option>
                    <option value="bubble">Bubble</option>

                </select>
            </div>
            <div>
                <label for="xAxis" class="block text-sm font-medium text-gray-700 dark:text-gray-300">X Axis</label>
                <select id="xAxis"
                    class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                    <% Object.keys(data[0]).forEach(key=> { %>
                        <option value="<%= key %>">
                            <%= key %>
                        </option>
                        <% }); %>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Y Axis (Multiple)</label>
                <div class="space-y-2 max-h-40 overflow-y-auto">
                    <% Object.keys(data[0]).forEach(key=> { %>
                        <div class="flex items-center">
                            <input id="y-<%= key %>" name="yAxis" type="checkbox" value="<%= key %>"
                                class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                            <label for="y-<%= key %>" class="ml-2 block text-sm text-gray-900 dark:text-gray-300">
                                <%= key %>
                            </label>
                        </div>
                        <% }); %>
                </div>
            </div>
        </div>
        <div class="bg-white dark:bg-gray-700 p-4 rounded-lg shadow">
            <canvas id="myChart" height="465" width="931"></canvas>
        </div>
    </div>
</div>
<script>
    const rawData = <%- rawData %>;
    const ctx = document.getElementById('myChart').getContext('2d');
    let myChart;

    function replaceAlphaValue(color) {
        // Use a regular expression to match the RGBA pattern and capture the first three numbers
        return color.replace(/rgba\((\d+),\s*(\d+),\s*(\d+),\s*1\)/, 'rgba($1, $2, $3, 0.2)');
    }

    function updateChart() {
    const chartType = document.getElementById('chartType').value;
    const xAxis = document.getElementById('xAxis').value;
    const yAxes = Array.from(document.querySelectorAll('input[name="yAxis"]:checked')).map(checkbox => checkbox.value);
    const isDarkMode = document.querySelector('html').classList.contains('dark');

    const datasets = yAxes.map(yAxis => {
        const data = rawData.map(item => item[yAxis]);
        let sum = 0;
        data.map((value) => {
            sum += parseInt(value);
        })
        const average = sum / data.length;
        let color = getRandomColor(1, isDarkMode);
        const newColor = replaceAlphaValue(color);
        return [
            {
                label: yAxis,
                data: data,
                backgroundColor: newColor,
                borderColor: color,
                borderWidth: 2,
                fill: chartType === 'area',
            },
            {
                label: `${yAxis} (Average)`,
                data: Array(data.length).fill(average),
                borderColor: color,
                borderWidth: 2,
                borderDash: [6, 3],
                pointRadius: 0,
                fill: false,
            }
        ];
    }).flat(); // Flatten the array to combine all datasets

    const chartData = {
        labels: rawData.map(item => item[xAxis]),
        datasets: datasets
    };

    if (myChart) {
        myChart.destroy();
    }
    const verticalLinePlugin = {
        id: 'verticalLine',
        afterDraw: (chart) => {
            const chartTypeWithLine = ['bar', 'line', 'scatter', 'bubble', 'area'];
            if (!chartTypeWithLine.includes(chart.config.type === 'line' ? 'area' : chart.config.type)) return;

            if (chart.tooltip._active && chart.tooltip._active.length) {
                const activePoint = chart.tooltip._active[0];
                const ctx = chart.ctx;
                let x;

                if (chart.config.type === 'scatter' || chart.config.type === 'bubble') {
                    x = chart.scales.x.getPixelForValue(activePoint.raw.x);
                } else {
                    x = activePoint.element.x;
                }

                const topY = chart.scales.y.top;
                const bottomY = chart.scales.y.bottom;

                ctx.save();
                ctx.beginPath();
                ctx.moveTo(x, topY);
                ctx.lineTo(x, bottomY);
                ctx.lineWidth = 1;
                ctx.strokeStyle = '#ff0000';
                ctx.stroke();
                ctx.restore();
            }
        }
    };
    myChart = new Chart(ctx, {
        type: chartType === 'area' ? 'line' : chartType,
        data: chartData,
        options: {
            responsive: true,
            scales: {
                x: {
                    ticks: {
                        color: isDarkMode ? '#e2e8f0' : '#4a5568'
                    },
                    grid: {
                        color: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        color: isDarkMode ? '#e2e8f0' : '#4a5568'
                    },
                    grid: {
                        color: isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: isDarkMode ? '#e2e8f0' : '#4a5568'
                    }
                },
                tooltip: {
                    mode: 'nearest',
                    intersect: false,
                    axis: 'x'
                }
            },
            lineTension: 0.2
        },
        plugins: [verticalLinePlugin]
    });
}


    function getRandomColor(alpha, isDarkMode) {
        console.log(isDarkMode);
        // Adjust the range of color values based on the isDarkMode flag
        const minColorValue = isDarkMode ? 80 : 0;  // Lower min for more variety
        const maxColorValue = isDarkMode ? 255 : 160; // Adjust max to allow a range of brightness

        const r = Math.floor(Math.random() * (maxColorValue - minColorValue + 1)) + minColorValue;
        const g = Math.floor(Math.random() * (maxColorValue - minColorValue + 1)) + minColorValue;
        const b = Math.floor(Math.random() * (maxColorValue - minColorValue + 1)) + minColorValue;

        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }

    document.getElementById('chartType').addEventListener('change', updateChart);
    document.getElementById('xAxis').addEventListener('change', updateChart);
    document.querySelectorAll('input[name="yAxis"]').forEach(checkbox => {
        checkbox.addEventListener('change', updateChart);
    });
    updateChart();
</script>